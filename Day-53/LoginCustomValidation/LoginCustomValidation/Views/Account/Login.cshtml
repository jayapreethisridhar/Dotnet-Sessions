@model LoginCustomValidation.Models.LoginModel

@{
    ViewBag.Title = "Login";
}

<h2>@ViewBag.Title</h2>

<div class="row">
    <div class="col-md-8">
        <section id="loginForm">
            @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                <h4>Use a local account to log in.</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(m => m.Username, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
                    <div class="col-md-10">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Log in" class="btn btn-default" />
                    </div>
                </div>
            }
        </section>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <!-- Custom validation scripts -->
    <script>
        $.validator.addMethod("usernameavailable", function (value, element) {
            return true; // This will always pass on the client side.
                          // You can implement AJAX calls here if needed.
        });

        $.validator.unobtrusive.adapters.add("usernameavailable", [], function (options) {
            options.rules["usernameavailable"] = true;
            options.messages["usernameavailable"] = options.params;
        });

        $.validator.addMethod("strongpassword", function (value, element) {
            var regex = /^(?=.*[a-z]);
            return regex.test(value);
        });

        $.validator.unobtrusive.adapters.add("strongpassword", [], function (options) {
            options.rules["strongpassword"] = true;
            options.messages["strongpassword"] = options.params;
        });
    </script>
}